{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAASC,SAASC,cAAc,SAChCC,EAAcF,SAASC,cAAc,mBACrCE,EAAaH,SAASC,cAAc,kBACpCG,EAAeJ,SAASC,cAAc,oBAEtCI,EAAgB,CACpBC,MAAO,QACPC,SAAU,YACVC,SAAU,OACVC,QAAS,EACTC,SAAU,OACVC,aAAc,QAgChB,SAASC,EAAcL,EAAUM,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEX,E,MAAUM,IAEpBM,EAAO,C,SAAEZ,E,MAAUM,GAAQ,GAE5BA,EAAM,G,CAtCbd,EAAOsB,iBAAiB,UAExB,SAAsBC,GACpBA,EAAMC,iBAEN,IAAIC,GAAStB,EAAYuB,MACrBC,GAAQvB,EAAWsB,MACnBE,GAAUvB,EAAaqB,MAI3B,IAAK,IAAIG,EAAI,EAAGA,EAAID,EAAQC,IAAK,CAE/BhB,EAAcgB,EAAI,EADGJ,EAAQE,EAAOE,GAEjCC,MAAK,EAACtB,SAAEA,EAAQM,MAAEA,KACjBhB,EAAAiC,OAAOC,QACL,uBAAqBxB,QAAiBM,MAAWR,KAElD2B,OAEF,EAAOzB,WAAUM,WAChBhB,EAAAiC,OAAMG,QAAC,sBACJ1B,QAA8BM,MAAYR,I","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formEl = document.querySelector('.form');\nconst delayInptEl = document.querySelector('[ name=\"delay\"]');\nconst stepInptEl = document.querySelector('[ name=\"step\"]');\nconst amountInptEl = document.querySelector('[ name=\"amount\"]');\n\nconst notifyOptions = {\n  width: '380px',\n  position: 'right-top',\n  distance: '10px',\n  opacity: 1,\n  fontSize: '20px',\n  borderRadius: '12px',\n};\n\nformEl.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n\n  let delay = +delayInptEl.value;\n  let step = +stepInptEl.value;\n  let amount = +amountInptEl.value;\n\n  // console.log(delay, step, amount);\n\n  for (let i = 0; i < amount; i++) {\n    let delayedPromise = delay + step * i;\n    createPromise(i + 1, delayedPromise)\n      .then(({ position, delay }) =>\n        Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`,\n          notifyOptions\n        )\n      )\n      .catch(({ position, delay }) =>\n        Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`,\n          notifyOptions\n        )\n      );\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$formEl","document","querySelector","$47d4ff9957288465$var$delayInptEl","$47d4ff9957288465$var$stepInptEl","$47d4ff9957288465$var$amountInptEl","$47d4ff9957288465$var$notifyOptions","width","position","distance","opacity","fontSize","borderRadius","$47d4ff9957288465$var$createPromise","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","delay1","value","step","amount","i","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.73b47375.js.map"}